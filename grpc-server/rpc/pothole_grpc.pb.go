// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pothole.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PotholeCommunicationService_RegisterVehicle_FullMethodName    = "/rpc.PotholeCommunicationService/RegisterVehicle"
	PotholeCommunicationService_PushLocationUpdate_FullMethodName = "/rpc.PotholeCommunicationService/PushLocationUpdate"
	PotholeCommunicationService_ExtendUpcomingArea_FullMethodName = "/rpc.PotholeCommunicationService/ExtendUpcomingArea"
)

// PotholeCommunicationServiceClient is the client API for PotholeCommunicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PotholeCommunicationServiceClient interface {
	// Initial request sent to start the system running
	RegisterVehicle(ctx context.Context, in *RegisterVehicleRequest, opts ...grpc.CallOption) (*RegisterVehicleResponse, error)
	// Registered a vehicle will push the location data
	PushLocationUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushLocationUpdateRequest, PushLocationUpdateResponse], error)
	// Server will send pothole location updates
	ExtendUpcomingArea(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse], error)
}

type potholeCommunicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPotholeCommunicationServiceClient(cc grpc.ClientConnInterface) PotholeCommunicationServiceClient {
	return &potholeCommunicationServiceClient{cc}
}

func (c *potholeCommunicationServiceClient) RegisterVehicle(ctx context.Context, in *RegisterVehicleRequest, opts ...grpc.CallOption) (*RegisterVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterVehicleResponse)
	err := c.cc.Invoke(ctx, PotholeCommunicationService_RegisterVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *potholeCommunicationServiceClient) PushLocationUpdate(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushLocationUpdateRequest, PushLocationUpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PotholeCommunicationService_ServiceDesc.Streams[0], PotholeCommunicationService_PushLocationUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushLocationUpdateRequest, PushLocationUpdateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PotholeCommunicationService_PushLocationUpdateClient = grpc.ClientStreamingClient[PushLocationUpdateRequest, PushLocationUpdateResponse]

func (c *potholeCommunicationServiceClient) ExtendUpcomingArea(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PotholeCommunicationService_ServiceDesc.Streams[1], PotholeCommunicationService_ExtendUpcomingArea_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PotholeCommunicationService_ExtendUpcomingAreaClient = grpc.ClientStreamingClient[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse]

// PotholeCommunicationServiceServer is the server API for PotholeCommunicationService service.
// All implementations must embed UnimplementedPotholeCommunicationServiceServer
// for forward compatibility.
type PotholeCommunicationServiceServer interface {
	// Initial request sent to start the system running
	RegisterVehicle(context.Context, *RegisterVehicleRequest) (*RegisterVehicleResponse, error)
	// Registered a vehicle will push the location data
	PushLocationUpdate(grpc.ClientStreamingServer[PushLocationUpdateRequest, PushLocationUpdateResponse]) error
	// Server will send pothole location updates
	ExtendUpcomingArea(grpc.ClientStreamingServer[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse]) error
	mustEmbedUnimplementedPotholeCommunicationServiceServer()
}

// UnimplementedPotholeCommunicationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPotholeCommunicationServiceServer struct{}

func (UnimplementedPotholeCommunicationServiceServer) RegisterVehicle(context.Context, *RegisterVehicleRequest) (*RegisterVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVehicle not implemented")
}
func (UnimplementedPotholeCommunicationServiceServer) PushLocationUpdate(grpc.ClientStreamingServer[PushLocationUpdateRequest, PushLocationUpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PushLocationUpdate not implemented")
}
func (UnimplementedPotholeCommunicationServiceServer) ExtendUpcomingArea(grpc.ClientStreamingServer[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExtendUpcomingArea not implemented")
}
func (UnimplementedPotholeCommunicationServiceServer) mustEmbedUnimplementedPotholeCommunicationServiceServer() {
}
func (UnimplementedPotholeCommunicationServiceServer) testEmbeddedByValue() {}

// UnsafePotholeCommunicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PotholeCommunicationServiceServer will
// result in compilation errors.
type UnsafePotholeCommunicationServiceServer interface {
	mustEmbedUnimplementedPotholeCommunicationServiceServer()
}

func RegisterPotholeCommunicationServiceServer(s grpc.ServiceRegistrar, srv PotholeCommunicationServiceServer) {
	// If the following call pancis, it indicates UnimplementedPotholeCommunicationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PotholeCommunicationService_ServiceDesc, srv)
}

func _PotholeCommunicationService_RegisterVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PotholeCommunicationServiceServer).RegisterVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PotholeCommunicationService_RegisterVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PotholeCommunicationServiceServer).RegisterVehicle(ctx, req.(*RegisterVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PotholeCommunicationService_PushLocationUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PotholeCommunicationServiceServer).PushLocationUpdate(&grpc.GenericServerStream[PushLocationUpdateRequest, PushLocationUpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PotholeCommunicationService_PushLocationUpdateServer = grpc.ClientStreamingServer[PushLocationUpdateRequest, PushLocationUpdateResponse]

func _PotholeCommunicationService_ExtendUpcomingArea_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PotholeCommunicationServiceServer).ExtendUpcomingArea(&grpc.GenericServerStream[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PotholeCommunicationService_ExtendUpcomingAreaServer = grpc.ClientStreamingServer[ExtendUpcomingAreaRequest, ExtendUpcomingAreaResponse]

// PotholeCommunicationService_ServiceDesc is the grpc.ServiceDesc for PotholeCommunicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PotholeCommunicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PotholeCommunicationService",
	HandlerType: (*PotholeCommunicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterVehicle",
			Handler:    _PotholeCommunicationService_RegisterVehicle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushLocationUpdate",
			Handler:       _PotholeCommunicationService_PushLocationUpdate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExtendUpcomingArea",
			Handler:       _PotholeCommunicationService_ExtendUpcomingArea_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pothole.proto",
}
